{
  "name": "grunt-pylint",
  "description": "Validate python code with pylint.",
  "version": "0.4.0",
  "homepage": "https://github.com/thusoy/grunt-pylint",
  "author": {
    "name": "Tarjei HusÃ¸y",
    "url": "https://github.com/thusoy"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thusoy/grunt-pylint.git"
  },
  "bugs": {
    "url": "https://github.com/thusoy/grunt-pylint/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/thusoy/grunt-pylint/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "devsetup": "pip install pylint==1.1 --target tasks/lib && grunt clean",
    "prepublish": "grunt clean"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-nodeunit": "~0.3.2",
    "grunt-release": "~0.7.0",
    "load-grunt-tasks": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "pylint",
    "python",
    "linting"
  ],
  "readme": "# grunt-pylint [![Build Status](https://travis-ci.org/thusoy/grunt-pylint.png?branch=automated-tests)](https://travis-ci.org/thusoy/grunt-pylint)\n\n> Validate python code with pylint.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-pylint --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-pylint');\n```\n\n## The \"pylint\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `pylint` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  pylint: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### disable\nType: `String` or `Array`  \n\nMessages to disable, either by category (like `C` for convention), by ID (like `C0103`) or by symbolic name (like `invalid-name`).\n\n#### enable\nType: `String` or `Array`  \n\nMessages to enable, either by category, ID or symbolic name.\n\n#### errorsOnly\nType: `Boolean`  \nDefault: `false`\n\nOnly report on error messages.\n\n#### externalPylint\nType `Boolean`  \nDefault: `false`\n\nUse pylint modules from python interpreter in path.\n\n#### force\nType: `Boolean`  \nDefault: `false`\n\nNever fail the task.\n\n#### ignore\nType: `String` or `Array`  \n\nFiles or directories to ignore. Must be basenames, not paths.\n\n#### messageTemplate\nType: `String`  \nDefault: `\"short\"`\n\nA string specifying how to format the output messages. Should be a string something like this: `{msg_id}, line {line}: {msg}`. This string will be formatted using regular new-style python formatting, see the documentation for this here: http://docs.python.org/2/library/string.html#format-specification-mini-language\n\nAvailable fields you can insert into the output is:\n\n- `msg_id`: The ID of the message, like `W0103`.\n- `abspath`: The absolute path to the module where the error was found\n- `module`: The name of module, like `package.my_module.py`.\n- `obj`: The name of the object where the error was found, like MyObject or my_func.\n- `line`: The line number of the error.\n- `column`: Column number of the error.\n- `path`: Path to the module with the error.\n- `msg`: The actual error message.\n- `C`: (captial C) The first letter of the message category.\n- `category`: The category of the message, either Info, Refactor, Convention, Warning, Error or Fatal.\n- `symbol`: The symbolic name of the message, like `unused-variable` for `W0612`.\n\nSome aliases also exist:\n\n- `parseable`: `\"{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}\"` (this is often the one supported by external tools that read pylint output)\n- `msvs`: `\"{path}({line}): [{msg_id}({symbol}){obj}] {msg}\"` The format read by Visual Studio.\n- `short`: `\"line {line}: {msg} ({symbol})\"` This is the default.\n\n#### outputFile\nType: `String`  \n\nA file to save the output to.\n\n#### outputFormat\nType: `String`  \nAlternatives: `text|colorized|html`\nDefault: `\"colorized\"`\n\nWhat format the output will be in. Specifying `options.outputFormat = \"html\"` will ignore anything set by `options.messageFormat`.\n\n#### rcfile\nType: `String`  \n\nA path to a rcfile to use. Messages to enable or disable given in `options.enable` and `options.disable` will override anything given in the rcfile.\n\n#### report\nType: `Boolean`  \nDefault: `false`\n\nWhether to include a full report or just the messages.\n\n#### virtualenv\nType: `String`  \n\nA path to a virtualenv to use when linting.\n\n### Usage Examples\n\n#### Default Options\nIn the simplest case, use all the default pylint options:\n\n```js\ngrunt.initConfig({\n  pylint: {\n    dist: {\n      src: 'mypackage',\n    }\n  }\n})\n```\n\n#### Custom Options\nIn this example, use a rcfile to specify checks to enable and disable, with overrides for one package.\n\n```js\ngrunt.initConfig({\n  pylint: {\n    options: {\n      rcfile: '.pylintrc',\n    },\n    src_package: {\n      src: 'mypackage',\n    },\n    tests: {\n      src: 'test',\n      options: {\n        disable: 'missing-docstring',\n      }\n    }\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Lint and test your code using [Grunt](http://gruntjs.com/). To get all dependencies installed, run `npm run-script devsetup`. This requires that you have pip installed.\n\n## Changelog\n\n### v0.4.0 (01-03-2014)\nUse python exec from virtualenv\n\n### v0.3.0 (26-01-2014)\nAdd option externalPylint and automate testing\n\n### v0.2.0 (23-01-2014)\nBump pylint to 1.1\n\n### v0.1.1 (21-09-2013)\nProperly escape all color codes\n\n### v0.1.0 (19-09-2013)\nInitial release.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-pylint@0.4.0",
  "_from": "grunt-pylint@"
}
